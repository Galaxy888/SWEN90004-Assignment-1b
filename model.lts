const NUM_PILOTS = 3
const NUM_TUGS = 5
const DOCKING_TUGS = 3
const UNDOCKING_TUGS = 2

const WAIT_ZONE_CAPACITY = 1
range PILOTS = 1..NUM_PILOTS

const DOCK = 0
const UNDOCK = 1

const FALSE = 0
const TRUE = 1
range BOOL = FALSE..TRUE

PRODUCER = (arrive -> PRODUCER).
CONSUMER = (depart -> CONSUMER).

OPERATOR = (shield_activate -> shield_deactivate -> OPERATOR).

PILOT = (acquire_ship -> 
		acquire_dock_tugs -> 
		depart_arrival_zone -> 
		dock -> 
		release_dock_tugs -> 
		unload -> 
		acquire_undock_tugs -> 
		undock -> 
		arrive_departure_zone -> 
		release_undock_tugs -> 
		release_ship -> PILOT).

ARRIVAL_ZONE(N=WAIT_ZONE_CAPACITY) = COUNT[0],
COUNT[i : 0..N] = 
	( when (i < N) arrive -> p[PILOTS].acquire_ship -> COUNT[i+1]
	| when (i > 0) p[PILOTS].depart_arrival_zone -> COUNT[i-1]).

DEPARTURE_ZONE(N=WAIT_ZONE_CAPACITY) = COUNT[0],
COUNT[i : 0..N] = 
	( when (i < N) p[PILOTS].arrive_departure_zone -> COUNT[i+1]
	| when (i > 0) p[PILOTS].release_ship -> depart -> COUNT[i-1]).

BERTH(N=1) = BERTH[0][FALSE][FALSE],
BERTH[current:0..N][shield:BOOL][occupied:BOOL] = ( when (current==DOCK && !shield && !occupied) p[PILOTS].dock -> BERTH[UNDOCK][shield][TRUE]
				| when (current==UNDOCK && !shield) p[PILOTS].undock -> BERTH[DOCK][shield][FALSE]
				| when (!shield) shield_activate -> BERTH[current][TRUE][occupied]
				| when (shield) shield_deactivate -> BERTH[current][FALSE][occupied]).

TUGS(N=NUM_TUGS) = COUNT[N],
COUNT[i : 0..NUM_TUGS] = 
	( when(i >= DOCKING_TUGS) acquire_dock_tugs -> COUNT[i-DOCKING_TUGS]
	| when(i <= (NUM_TUGS-DOCKING_TUGS)) release_dock_tugs -> COUNT[i+DOCKING_TUGS]
	| when(i >= UNDOCKING_TUGS) acquire_undock_tugs -> COUNT[i-UNDOCKING_TUGS]
	| when(i <= (NUM_TUGS-UNDOCKING_TUGS)) release_undock_tugs -> COUNT[i+UNDOCKING_TUGS]).

||MAIN = (PRODUCER || CONSUMER || OPERATOR || ARRIVAL_ZONE || DEPARTURE_ZONE || BERTH || p[PILOTS]::TUGS || p[PILOTS]:PILOT).
